<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rookie Zcy</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-17T08:14:46.970Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zcy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Design Pattern</title>
    <link href="http://yoursite.com/2018/01/17/Design-Pattern-1/"/>
    <id>http://yoursite.com/2018/01/17/Design-Pattern-1/</id>
    <published>2018-01-17T08:14:46.000Z</published>
    <updated>2018-01-17T08:14:46.970Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Design Pattern</title>
    <link href="http://yoursite.com/2018/01/17/Design-Pattern/"/>
    <id>http://yoursite.com/2018/01/17/Design-Pattern/</id>
    <published>2018-01-17T08:14:42.000Z</published>
    <updated>2018-01-17T08:17:07.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p><strong>设计模式（Design Pattern）</strong>是一套呗反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结，使用设计模式是为了可重用代码、让代码更容易被他人理解并且保证代码可靠性。</p><h2 id="一、概况"><a href="#一、概况" class="headerlink" title="一、概况"></a>一、概况</h2><p>设计模式分为三大类：</p><ol><li><p>创建型模式（描述如何创建对象），共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</p></li><li><p>结构型模式（描述如何实现类或对象的组合），共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</p></li><li><p>行为型模式（描述类或对象怎样交互以及怎样分配职责），共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</p></li></ol><h2 id="二、设计模式的七大原则"><a href="#二、设计模式的七大原则" class="headerlink" title="二、设计模式的七大原则"></a>二、设计模式的七大原则</h2><p>1、<strong>单一职责原则(Single Responsibility Principle,SRP)</strong></p><p>一个类只负责一个功能领域中的相应职责。</p><p>2、<strong>开闭原则（Open Close Principle）</strong></p><p>开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。</p><p>3、<strong>里氏代换原则（Liskov Substitution Principle）</strong></p><p>所有引用基类对象的地方能够透明地使用其子类的对象。<br>实际上可以这样理解：（1）子类的能力必须大于等于父类，即父类可以使用的方法，子类都可以使用。（2）返回值也是同样的道理。假设一个父类方法返回一个List，子类返回一个ArrayList，这当然可以。如果父类方法返回一个ArrayList，子类返回一个List，就说不通了。这里子类返回值的能力是比父类小的。（3）还有抛出异常的情况。任何子类方法可以声明抛出父类方法声明异常的子类。<br>而不能声明抛出父类没有声明的异常。</p><p>4、<strong>依赖倒转原则（Dependence Inversion Principle）</strong></p><p>这个是开闭原则的基础，抽象不应该依赖于细节，细节应该依赖于抽象。换言之，要针对接口编程，而不是针对实现编程。</p><p>5、<strong>接口隔离原则（Interface Segregation Principle）</strong></p><p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。</p><p>6、<strong>迪米特法则（最少知道原则）（Demeter Principle）</strong></p><p>为什么叫最少知道原则，就是说：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。</p><p>7、<strong>合成复用原则（Composite Reuse Principle）</strong></p><p>原则是尽量使用合成/聚合的方式，而不是继承来达到复用的目的。</p><h2 id="三、创建型模式"><a href="#三、创建型模式" class="headerlink" title="三、创建型模式"></a>三、创建型模式</h2><p>1、<strong>抽象工厂模式(Abstract factory pattern)</strong>: 提供一个接口, 用于创建相关或依赖对象的家族, 而不需要指定具体类.</p><p>2、<strong>生成器模式(Builder pattern)</strong>: 使用生成器模式封装一个产品的构造过程, 并允许按步骤构造. 将一个复杂对象的构建与它的表示分离,<br>使得同样的构建过程可以创建不同的表示.</p><p>3、<strong>工厂模式(factory method pattern)</strong>: 定义了一个创建对象的接口, 但由子类决定要实例化的类是哪一个. 工厂方法让类把实例化推迟到子类.</p><p>4、<strong>原型模式(prototype pattern)</strong>: 当创建给定类的实例过程很昂贵或很复杂时, 就使用原形模式.</p><p>5、<strong>单例模式(Singleton pattern)</strong>: 确保一个类只有一个实例, 并提供全局访问点.</p><p>6、<strong>多例模式(Multition pattern)</strong>: 在一个解决方案中结合两个或多个模式, 以解决一般或重复发生的问题.</p><h2 id="四、结构型模式"><a href="#四、结构型模式" class="headerlink" title="四、结构型模式"></a>四、结构型模式</h2><p>1、<strong>适配器模式(Adapter pattern)</strong>: 将一个类的接口, 转换成客户期望的另一个接口. 适配器让原本接口不兼容的类可以合作无间. 对象适配器使用组合, 类适配器使用多重继承.</p><p>2、<strong>桥接模式(Bridge pattern)</strong>: 使用桥接模式通过将实现和抽象放在两个不同的类层次中而使它们可以独立改变.</p><p>3、<strong>组合模式(composite pattern)</strong>: 允许你将对象组合成树形结构来表现”整体/部分”层次结构. 组合能让客户以一致的方式处理个别对象以及对象组合.</p><p>4、<strong>装饰者模式(decorator pattern)</strong>: 动态地将责任附加到对象上, 若要扩展功能, 装饰者提供了比继承更有弹性的替代方案.</p><p>5、<strong>外观模式(facade pattern)</strong>: 提供了一个统一的接口, 用来访问子系统中的一群接口. 外观定义了一个高层接口, 让子系统更容易使用.</p><p>6、<strong>亨元模式(Flyweight Pattern)</strong>: 如想让某个类的一个实例能用来提供许多”虚拟实例”, 就使用蝇量模式.</p><p>7、<strong>代理模式(Proxy pattern)</strong>: 为另一个对象提供一个替身或占位符以控制对这个对象的访问.</p><h2 id="五、行为型模式"><a href="#五、行为型模式" class="headerlink" title="五、行为型模式"></a>五、行为型模式</h2><p>1、<strong>责任链模式(Chain of responsibility pattern)</strong>: 通过责任链模式, 你可以为某个请求创建一个对象链. 每个对象依序检查此请求并对其进行处理或者将它传给链中的下一个对象.</p><p>2、<strong>命令模式(Command pattern)</strong>: 将”请求”封闭成对象, 以便使用不同的请求,队列或者日志来参数化其他对象. 命令模式也支持可撤销的操作.</p><p>3<strong>、解释器模式(Interpreter pattern)</strong>: 使用解释器模式为语言创建解释器.</p><p>4、<strong>迭代器模式(iterator pattern)</strong>: 提供一种方法顺序访问一个聚合对象中的各个元素, 而又不暴露其内部的表示.</p><p>5、<strong>中介者模式(Mediator pattern)</strong> : 使用中介者模式来集中相关对象之间复杂的沟通和控制方式.</p><p>6、<strong>备忘录模式(Memento pattern)</strong>: 当你需要让对象返回之前的状态时(例如, 你的用户请求”撤销”), 你使用备忘录模式.</p><p>7、<strong>观察者模式(observer pattern)</strong>: 在对象之间定义一对多的依赖, 这样一来, 当一个对象改变状态, 依赖它的对象都会收到通知, 并自动更新.</p><p>8、<strong>状态模式(State pattern)</strong>: 允许对象在内部状态改变时改变它的行为, 对象看起来好象改了它的类.</p><p>9、<strong>策略模式(strategy pattern)</strong>: 定义了算法族, 分别封闭起来, 让它们之间可以互相替换, 此模式让算法的变化独立于使用算法的客户.</p><p>10、<strong>模板方法模式(Template pattern)</strong>: 在一个方法中定义一个算法的骨架, 而将一些步骤延迟到子类中. 模板方法使得子类可以在不改变算法结构的情况下, 重新定义算法中的某些步骤.</p><p>11、<strong>访问者模式(visitor pattern)</strong>: 当你想要为一个对象的组合增加新的能力, 且封装并不重要时, 就使用访问者模式.</p><h2 id="六、常用的设计模式（详细）"><a href="#六、常用的设计模式（详细）" class="headerlink" title="六、常用的设计模式（详细）"></a>六、常用的设计模式（详细）</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;设计模式&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;设计模式（Design Pattern）&lt;/strong&gt;是一套呗反复使用的、多数人知晓的、经过分类编目的、
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/01/17/hello-world/"/>
    <id>http://yoursite.com/2018/01/17/hello-world/</id>
    <published>2018-01-17T01:54:18.259Z</published>
    <updated>2018-01-17T01:54:18.259Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
